#include <iostream>
#include <cmath>
#include <Windows.h>
using namespace std;

double f(double x)
{
    return x = 0.5 - log10(x);
}

int main()
{
    // підключення укр.мови 
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    double a = 0.5, b = 1, e = 0.0001; // відрізок [a, b] та задана точність 
    int i = 0, N = 1000; // i - змінна для підрахунку кроків ітерації, N - максимальна кількість ітерацій

    cout << "Інтервал (a, b): " << "("<< a << "," << b << ")" << endl;
    cout << "Задана точність e = " << e << "\n\n";

    while (i <= N) // якщо i<=N, то шукаємо корені 
    {
        a = f(b); // за початкове наближення вибираємо 0,5
        if (fabs(a - b) < e) // якщо |a-b|<e, то виходимо з циклу
        {
            cout << "\nЗначення a = " << a << endl; // вивід значення a
            break;
        }
        cout << "Ітерація " << i << ": a = " << a << " \t"; // вивід кожної ітерації і  значення
        i++; // збільшення кількості кроків ітерації
        b = a; 
        cout << "Результат: " << a << endl; // вивід результату
        // якщо кількість ітерацій більша ніж максмимальна к-сть ітер., то виводимо повідомлення
        if (i > N)
        {
            cout << "Коренів на даному інтервалі немає" << endl;;
            break;
        }
    }
    // вивід результату та на якому кроці він був знайдений
    cout << "\nКорінь x = " << a << " на ітерації " << i << endl;

    cout << endl;
    system("pause");
    return 0;
}

//#include <iostream>
//#include <cmath>
//#include <Windows.h>
//using namespace std;
//
//double f(double x)
//{
//    return x = 0.5 - log10(x);
//}
//
//int main()
//{
//    // підключення укр.мови 
//    SetConsoleCP(1251);
//    SetConsoleOutputCP(1251);
//
//    double a = 0.5, b = 1, e = 0.0001; // відрізок [a, b] та задана точність 
//    int i = 0, N = 1000; // i - змінна для підрахунку кроків ітерації, N - максимальна кількість ітерацій
//
//    cout << "Інтервал (a, b): " << "("<< a << "," << b << ")" << endl;
//    cout << "Задана точність e = " << e << "\n\n";
//
//    while (i <= N) // якщо i<=N, то шукаємо корені 
//    {
//        a = f(b); // за початкове наближення вибираємо 0,5
//        if (fabs(a - b) < e) // якщо |a-b|<e, то виходимо з циклу
//        {
//            cout << "\nЗначення a = " << a << endl; // вивід значення a
//            break;
//        }
//        cout << "Ітерація " << i << ": a = " << a << " \t"; // вивід кожної ітерації і  значення
//        i++; // збільшення кількості кроків ітерації
//        b = a; 
//        cout << "Результат: " << a << endl; // вивід результату
//        // якщо кількість ітерацій більша ніж максмимальна к-сть ітер., то виводимо повідомлення
//        if (i > N)
//        {
//            cout << "Коренів на даному інтервалі немає" << endl;;
//            break;
//        }
//    }
//    // вивід результату та на якому кроці він був знайдений
//    cout << "\nКорінь x = " << a << " на ітерації " << i << endl;
//
//    cout << endl;
//    system("pause");
//    return 0;
//}



//#include <iostream>
//#include <cmath>
//#include <Windows.h>
//using namespace std;
//
//double f(double x)
//{
//    return x = 0.5 - log10(x);
//}
//
//int main()
//{
//    // підключення укр.мови 
//    SetConsoleCP(1251);
//    SetConsoleOutputCP(1251);
//
//    double a = 0.5, b = 1, e = 0.0001; // відрізок [a, b] та задана точність 
//    int i = 0, N = 1000; // i - змінна для підрахунку кроків ітерації, N - максимальна кількість ітерацій
//
//    cout << "Інтервал (a, b): " << "("<< a << "," << b << ")" << endl;
//    cout << "Задана точність e = " << e << "\n\n";
//
//    while (i <= N) // якщо i<=N, то шукаємо корені 
//    {
//        a = f(b); // за початкове наближення вибираємо 0,5
//        if (fabs(a - b) < e) // якщо |a-b|<e, то виходимо з циклу
//        {
//            cout << "\nЗначення b = " << b << endl; // вивід значення b
//            break;
//        }
//        cout << "Ітерація " << i << ": a = " << a << " \t"; // вивід кожної ітерації і  значення
//        i++; // збільшення кількості кроків ітерації
//        b = a; 
//        cout << "Результат: " << a << endl; // вивід результату
//        // якщо кількість ітерацій більша ніж максмимальна к-сть ітер., то виводимо повідомлення
//        if (i > N)
//        {
//            cout << "Коренів на даному інтервалі немає" << endl;;
//            break;
//        }
//    }
//    // вивід результату та на якому кроці він був знайдений
//    cout << "\nКорінь x = " << a << " на ітерації " << i << endl;
//
//    cout << endl;
//    system("pause");
//    return 0;
//}


//
//#include <iostream>
//#include <cmath>
//#include <Windows.h>
//using namespace std;
//
//double f(double x)
//{
//    return x = 0.5 - log10(x);
//}
//
//// похідна від 0.5 - log10(x) = 1 / x * ln(10)
//double p(double x)
//{
//    return 1 / x * (log10(10) / log10(exp(x))); // 1 / x * ln(10)
//}
//
//// (0.5 - log10(x))' = 1 / x * ln(10)
//// (0.5 - log10(x))'' = (1 / x * ln(10))' = -1 / x^2 * ln(10)
//
//// друга похідна від 0.5 - log10(x)
//double p2(double x)
//{
//    return -1 / x * x * (log10(10) / log10(exp(x))); // -1 / x^2 * ln(10)
//}
//
//int main()
//{
//    // підключення укр.мови 
//    SetConsoleCP(1251);
//    SetConsoleOutputCP(1251);
//
//    double a = 0.5, b = 1, e = 0.0001, x; // відрізок [a, b] та задана точність 
//    int i = 0; // i - змінна для підрахунку кроків ітерації, N - максимальна кількість ітерацій
//
//    cout << "Інтервал (a, b): " << "(" << a << "," << b << ")" << endl;
//    cout << "Задана точність e = " << e << "\n\n";
//
//    if (f(a) * f(b) < 0)
//    {
//        cout << "Корені знайдено" << endl;
//        while (1) // якщо i<=N, то шукаємо корені 
//        {
//            if (fabs(a - b) < e) // якщо |a-b|<e, то виходимо з циклу
//            {
//                x = (b - a) / 2;
//                i = i + 1;
//                cout << "\nЗначення x = " << x << endl; // вивід значення a
//                break;
//            }
//            a = f(b); // за початкове наближення вибираємо 0,5
//            cout << "Ітерація " << i << ": a = " << a << " \t"; // вивід кожної ітерації і  значення
//            i++; // збільшення кількості кроків ітерації
//            b = a;
//            cout << "Результат: " << a << endl; // вивід результату
//            // якщо кількість ітерацій більша ніж максмимальна к-сть ітер., то виводимо повідомлення
//            if (i > N)
//            {
//                cout << "Коренів на даному інтервалі немає" << endl;;
//                break;
//            }
//        }
//        // вивід результату та на якому кроці він був знайдений
//        cout << "\nКорінь x = " << a << " на ітерації " << i << endl;
//    }
//    else
//    {
//        cout << "Коренів не існує" << endl;
//    }
//
//    cout << endl;
//    system("pause");
//    return 0;
//}
